What is MongoDB?
- It is simply Database Management System, and it will allow to store Database
- Document oriented
- Stores data in the form of collections & documents
- Gained popularity in mid 2000's

'Mongo' means Big/Humongous


Why MongoDB?

RDBMS 
eg: MYSQL, Oracle.

Have limitation
- Data stores in tables.
- It should have fixed schema.

In today's world the amount of data is huge.
so, it needs more storage and computation and RDBMS (MYSQL) have performance issue for
storing and compution of Huge data.
And, for this MongoDB comes in, it is very efficient in storing huge amount of data.

- as it is Natively scalable
- and, provide flexible schema.

* MongoDB belngs to NOSQL Database


How MongoDB Organise?

MOngoDB server
     ⬇️
Multiple Databases(D1,D2,D3...)
     ⬇️
Multiple Collections(C1,C2,C3...)
     ⬇️
Multiple Documents(d1,d2,d3...)

-And document look like JSON


Advantages of MongoDB :

1.) It gives best of SQL & NOSQL

RDBMS(SQL) provides :
-schema
-transaction
-Relationship

NOSQL provides
-flexible schema
-scalability

But MonhoDB provides both of these.

2.) It is open source(Free of cost)

3.) Horizontally scalability

scalability:- If a system have 1000 records and it takes 10ms query time -- After few 
months the number of records increases to 1million and after that also it takes approx.
10ms. It means System is scalable. But, if query time increases then we called it is 
not scalable.

In MYSQL & Oracle :- If Data load (increases), query time(increases)

How to Scale things up?

Vertical Scaling:

Let's consider you have 500mb of storage and its 90% storage full, then we bought another
500mb storage and and add up with the privious storage (500mb+500mb=1000mb) and if this
storage also full, we bought another 500mb storage (500mb+500mb+500mb=1500mb).
Here we increases the storage of a machine, This is called Vertical Scaling.

In sort: increases storage of same machine to increase performance.

Vertical scaling challenges:
->single point failure, if it fails you loose all data
->After a point you won't get as much performance increase as much you pay,
  so you won't relay on vertical scaling for large data storage.


Horizontal Scaling :
It said instead of using one machine use multiple machine.

if we want to store 2000 MB of data we use multiple machine (eg. 4 machine each of 
storage 500MB and connected over a newwork).
If data increase add new machine, if data decrease remove the machine from the network.


4.) Data replication

5.) Reliable

6.) Flexible Schema


Use cases  of mongoDB:

-> Content Management System
-> Product Data Management
-> Operational Intelligence
-> Online aplliction


Sharding in MongoDB:

shard means "a small part of a whole" hence Sharding means dividing a larger part into 
smaller parts.

Horizontally scalable is known as Sharding

EG. a product have "1 million" documents and so we can divide it to 3 differnet machine 
3.33lakh documents each. This is called sharding (Distributing data on multiple machine)

Then what id any machine fails its all data removes, to overcome this problem we replicating 
the data (storing data in more than 1 machine. so, if one machine down we can access data 
from another machine)

MongoDB is scalable because of two reasons:

1. Sharding
2. Replica set


How MongoDB stores data
-In the form of Documents (look like JSON)
BSON: Binary JSON

Advantages os BSON
1.less space 
2.faster traversal (improve query speed)
3.large number of data type

Data types in MongoDB:
Text:
>string 

Numeric:
>32-bit integer
>64-but integer
>Double
>Decimal128

Date/time:
>Date
>Timestamp

Others:
>Object
>Array
>Binary Data 
>ObjectID
>Boolean
>Null
>Regular expression
>Javascript
>Minkey
>Maxkey

** In MongoDB max. size of document is 16MB


Data Modelling in MongoDB

* Representing Entities (Documents [BSON])
* Relationship

Relationship type:

> 1 to 1 : citizen <--> Aadhar
> 1 to many : country <--> citizen
> many to 1 : citizen <--> country
> many to many : student <--> teacher

Ways of Representing Relationship :
>1. Embedded Data:
{
     _id :<object1>,
     username:"123xyz",
     contact:{                          //Embedded
          phone:"123-456-7890",
          email:"xyz@gmail.com"
     }
     access:{                           //Embedded
          level:5,
          group:" "
     }
}

>2. Refernces

{
     id:<object id>,
     username: "123xyz" 
}


context document:

{
     _id:<object2>,
     userid:<objectId1>,       
     phone:"123-456-7890",
     email:"xyz@gmail.com"   
}

access document:

{
     _id:<object3>,
     userid:<objectId1>,
     level:5,
     group:" "
}

here, unique id fields refers to another documents (known as reference)


Embedded document:
Advantages:
> Fast query (single query can fetch me all data)
> Easy to create
> Easy to maintain transaction

challenges:
> Chances to too muc embedding can exceed 16MB limitation
> Excess of data loaded each time. (eager loading)

Referencing :
Advantages:
> Small documents
> Lazy loading (load only that much data which is needed)

challenges:
> Query could be slower. (because of multiple query)
> transaction become complecated.
