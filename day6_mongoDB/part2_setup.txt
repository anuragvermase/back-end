Commands:

mongosh: 'mongosh' command is used as a command-line interface(CLI) for MongoDB. 
It allows usres to interact with MongoDB databases, run queries, perform administrative 
task and manage database operatons from the command line.

cls : use to clear the screen.

show databases : shows the database present/created

NOTE: You'll only see the database list, if it has data/documents in the mongoDB shell.

use admin: 'use' command use to change the database

use newdb : 'use' command also use to create new database


COLLECTIONS 

* To create a new collection

db.createCollection("nameOfColletion");
{ok:1}

* To see list of collections
student-> collection present in database 

show collections;

* To rename a collection

db.nameOfCollection.renameCollection("newCollectionName");
{ok:1}

* To remove a collection 

db.nameOfCollection.drop();
true

+++++++++++++++++++++++++++++++++++++
Database
   ⬇️
Colllection
   ⬇️
Documents
   ⬇️

insert(create),queries(read),update,delete {CRUD operation}

+++++++++++++++++++++++++++++++++++++

* Creation of document/data

var user ={
    name: "Anurag Verma",
    ip:"127.0.0.1",
    LastLoginTime : 15757048976
}
user -> created.

* To create new colletion and insert data(user) at same time

db.students.insertOne(user);    //student -> DB, InsertOne -> insert of one document
{
    acknowledgement :true,
    insertId:objectId("..........")
}

* To insert multiple document in collection ("insertMany)

db.students.insertMany([{name:"anurag",ip:"121.0.0>4"},{name:"suraj",hobby:"dance"}]);
//pack multiple document into Array

* To read the document

db.students.find();

*search with filter.

db.students.find({name:"anurag"});


//Nested Document
var n_user = {
   name:"john",
   job:{
      title:"programmer",
      salary:125000
   }
}

db.students.insertOne(n_user); //insert the document in DB(students)

* query one nested fields(read)

db.students.find({'job.title':'programmer'});

* query to find document by alphabet(RegEx)

db.students.find({name:/v.*/}); //     /v.*/->RegEx

* to show only limited documents.

db.students.find().limit(2); // limit(2)-> out of all document only show first two document

* to format(structure) the document 

db.students.find().pretty(); // pretty()-> use for better look of documents

* to skip the documents 

db.students.find().skip(2); // skip(2)-> skip the first two documents and shows rest documents

* we can sort the document in Ascending & Decending order

db.students.find().sort({name:1}); //1 -> means ascending order, if -1 means decending order

* to find total count/number of documents.

db.students.find().count();

* retrive distinct value

db.students.distinct('name') //gives list of all unique names.
